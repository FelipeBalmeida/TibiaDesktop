/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Janelas;

import Controller.KnightController;
import Model.Knight;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.io.*;
import java.util.*;
import java.util.List;
import java.util.ArrayList;

public class KnightJanela extends javax.swing.JFrame {

    private KnightController controller = new KnightController();
    private List<Knight> knightsList = new ArrayList<>();
    private int currentIndex = 0;

    /**
     * Creates new form Knight
     */
    public KnightJanela() {
        initComponents();
        carregarKnights(); // Carregar os knights ao iniciar a janela
        exibirKnight(); // Exibir o primeiro Knight
        setLocationRelativeTo(null);
    }

    private void carregarKnights() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/Personagens/knights.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] dados = line.split(",");
                if (dados.length == 3) {
                    String nome = dados[0];
                    int level = Integer.parseInt(dados[1]);
                    int skill = Integer.parseInt(dados[2]);
                    knightsList.add(new Knight(nome, level, skill));
                }
            }
        } catch (IOException e) {
            System.out.println("Erro ao carregar os knights: " + e.getMessage());
        }
    }

    // Exibir o knight atual no JLabel
    private void exibirKnight() {
        if (!knightsList.isEmpty()) {
            Knight currentKnight = knightsList.get(currentIndex);
            jLabelKnightSalvos.setText("Nome: " + currentKnight.getNome()
                    + " | Level: " + currentKnight.getLevel()
                    + " | Skill: " + currentKnight.getSkill());
        } else {
            jLabelKnightSalvos.setText("Nenhum Knight salvo.");
        }
    }

    private void atualizarArquivo() {
        try (PrintWriter writer = new PrintWriter(new FileWriter("src/Personagens/knights.txt"))) {
            for (Knight knight : knightsList) {
                writer.println(knight.getNome() + "," + knight.getLevel() + "," + knight.getSkill());
            }
            System.out.println("Arquivo knights.txt atualizado com sucesso!");
        } catch (IOException e) {
            System.out.println("Erro ao atualizar o arquivo knights.txt: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButtonSalvarKnight = new javax.swing.JButton();
        jButtonExcluirKnight = new javax.swing.JButton();
        jButtonAlterarKnight = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNomeKnight = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldLevelKnight = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneSkillKnight = new javax.swing.JTextPane();
        jLabelKnightSalvos = new javax.swing.JLabel();
        jButtonPassarKnight = new javax.swing.JButton();

        jButton3.setText("jButton3");

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButtonSalvarKnight.setText("Salvar");
        jButtonSalvarKnight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSalvarKnightMouseClicked(evt);
            }
        });
        jButtonSalvarKnight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarKnightActionPerformed(evt);
            }
        });

        jButtonExcluirKnight.setText("Excluir");
        jButtonExcluirKnight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonExcluirKnightMouseClicked(evt);
            }
        });

        jButtonAlterarKnight.setText("Alterar");
        jButtonAlterarKnight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAlterarKnightMouseClicked(evt);
            }
        });
        jButtonAlterarKnight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarKnightActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome");

        jTextFieldNomeKnight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomeKnightActionPerformed(evt);
            }
        });

        jLabel2.setText("Level");

        jLabel3.setText("Skill");

        jTextFieldLevelKnight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldLevelKnightActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPaneSkillKnight);

        jButtonPassarKnight.setText(">>>");
        jButtonPassarKnight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonPassarKnightMouseClicked(evt);
            }
        });
        jButtonPassarKnight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPassarKnightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonSalvarKnight)
                        .addGap(74, 74, 74)
                        .addComponent(jButtonExcluirKnight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(jButtonAlterarKnight)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelKnightSalvos, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldNomeKnight, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                                    .addComponent(jTextFieldLevelKnight)
                                    .addComponent(jScrollPane1))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPassarKnight)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldNomeKnight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldLevelKnight, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelKnightSalvos)
                    .addComponent(jButtonPassarKnight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSalvarKnight)
                    .addComponent(jButtonExcluirKnight)
                    .addComponent(jButtonAlterarKnight))
                .addGap(65, 65, 65))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldLevelKnightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLevelKnightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldLevelKnightActionPerformed

    private void jButtonAlterarKnightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarKnightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAlterarKnightActionPerformed

    private void jButtonSalvarKnightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSalvarKnightMouseClicked
        // Pega os dados dos campos
        String nome = jTextFieldNomeKnight.getText();
        int level = Integer.parseInt(jTextFieldLevelKnight.getText());
        int skill = Integer.parseInt(jTextPaneSkillKnight.getText());

        // Cria o objeto Knight
        Knight knight = new Knight(nome, level, skill);

        // Salva usando o controller
        controller.salvar(knight);

        // Mensagem de sucesso
        JOptionPane.showMessageDialog(this, "Knight salvo com sucesso!");
    }//GEN-LAST:event_jButtonSalvarKnightMouseClicked

    private void jButtonSalvarKnightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarKnightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSalvarKnightActionPerformed

    private void jButtonPassarKnightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonPassarKnightMouseClicked
        if (!knightsList.isEmpty()) {
            // Incrementar o índice para passar para o próximo knight
            currentIndex = (currentIndex + 1) % knightsList.size(); // Volta ao primeiro knight se ultrapassar o tamanho da lista
            exibirKnight(); // Atualiza a exibição do knight
        }
    }//GEN-LAST:event_jButtonPassarKnightMouseClicked

    private void jButtonPassarKnightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPassarKnightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPassarKnightActionPerformed

    private void jButtonExcluirKnightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExcluirKnightMouseClicked
        if (!knightsList.isEmpty()) {
            // Excluir o knight atual da lista
            knightsList.remove(currentIndex);

            // Se a lista não estiver vazia após a exclusão, ajusta o índice
            if (currentIndex >= knightsList.size()) {
                currentIndex = knightsList.size() - 1; // Se o índice for maior que o tamanho, vai para o último knight
            }

            // Atualiza a exibição
            exibirKnight();

            // Atualizar o arquivo knights.txt
            atualizarArquivo();
        } else {
            // Se não houver knights, exibe uma mensagem
            JOptionPane.showMessageDialog(this, "Não há knights para excluir.");
        }

    }//GEN-LAST:event_jButtonExcluirKnightMouseClicked

    private void jButtonAlterarKnightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAlterarKnightMouseClicked
        if (!knightsList.isEmpty()) {
            // Obtém o knight atual
            Knight currentKnight = knightsList.get(currentIndex);

            // Solicita ao usuário o novo nome, level e skill
            String novoNome = JOptionPane.showInputDialog(this, "Digite o novo nome:", currentKnight.getNome());
            if (novoNome == null) {
                return; // Se o usuário cancelar a edição
            }
            String novoLevelStr = JOptionPane.showInputDialog(this, "Digite o novo level:", String.valueOf(currentKnight.getLevel()));
            if (novoLevelStr == null) {
                return; // Se o usuário cancelar a edição
            }
            String novoSkillStr = JOptionPane.showInputDialog(this, "Digite a nova skill:", String.valueOf(currentKnight.getSkill()));
            if (novoSkillStr == null) {
                return; // Se o usuário cancelar a edição
            }
            try {
                int novoLevel = Integer.parseInt(novoLevelStr);
                int novoSkill = Integer.parseInt(novoSkillStr);

                // Atualiza os dados do knight
                currentKnight.setNome(novoNome);
                currentKnight.setLevel(novoLevel);
                currentKnight.setSkill(novoSkill);

                // Atualiza a exibição do knight alterado
                exibirKnight();

                // Atualiza o arquivo knights.txt
                atualizarArquivo();

                // Informa ao usuário que a alteração foi realizada com sucesso
                JOptionPane.showMessageDialog(this, "Knight alterado com sucesso!");

            } catch (NumberFormatException e) {
                // Caso o level ou a skill não sejam números válidos
                JOptionPane.showMessageDialog(this, "O level e a skill devem ser números inteiros.");
            }
        } else {
            // Se a lista de knights estiver vazia
            JOptionPane.showMessageDialog(this, "Não há knights para alterar.");
        }
    }//GEN-LAST:event_jButtonAlterarKnightMouseClicked

    private void jTextFieldNomeKnightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomeKnightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomeKnightActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KnightJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KnightJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KnightJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KnightJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KnightJanela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonAlterarKnight;
    private javax.swing.JButton jButtonExcluirKnight;
    private javax.swing.JButton jButtonPassarKnight;
    private javax.swing.JButton jButtonSalvarKnight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelKnightSalvos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldLevelKnight;
    private javax.swing.JTextField jTextFieldNomeKnight;
    private javax.swing.JTextPane jTextPaneSkillKnight;
    // End of variables declaration//GEN-END:variables
}
