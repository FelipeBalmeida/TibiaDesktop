/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Janelas;

import Controller.PaladinController;
import Model.Paladin;
import javax.swing.*;
import java.io.*;
import java.util.*;
import java.util.List;
import java.util.ArrayList;
import java.awt.GridLayout;
import javax.swing.ImageIcon;
import java.awt.Image;

public class PaladinJanela extends javax.swing.JFrame {

    private PaladinController controller = new PaladinController();
    private List<Paladin> paladinsList; // A lista será inicializada e preenchida pelo controller
    private int currentIndex = 0;
    private JLabel backgroundLabel;

    /**
     * Creates new form PaladinJanela
     */
    public PaladinJanela() {
        initComponents();
        carregarPaladins(); // Carregar os paladinos ao iniciar a janela
        exibirPaladin(); // Exibir o primeiro Paladino
        setLocationRelativeTo(null);

        ImageIcon backgroundImage = new ImageIcon(getClass().getResource("/imagens/2.png"));
        Image img = backgroundImage.getImage().getScaledInstance(this.getWidth(), this.getHeight(), Image.SCALE_SMOOTH);
        backgroundLabel = new JLabel(new ImageIcon(img));

        backgroundLabel.setBounds(0, 0, this.getWidth(), this.getHeight());

        getLayeredPane().setLayout(null);
        getLayeredPane().add(backgroundLabel, new Integer(Integer.MIN_VALUE));

        ((JPanel) this.getContentPane()).setOpaque(false);

        setSize(500, 500);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    private void carregarPaladins() {
        this.paladinsList = controller.getTodosPaladins(); // Obtém a lista do Controller

        if (paladinsList.isEmpty()) {
            currentIndex = 0;
        } else if (currentIndex >= paladinsList.size()) {
            currentIndex = paladinsList.size() - 1;
        }
    }

    private void exibirPaladin() {
        if (!paladinsList.isEmpty() && currentIndex >= 0 && currentIndex < paladinsList.size()) {
            Paladin currentPaladin = paladinsList.get(currentIndex);
            // Preencher os JTextFields com os dados do Paladin atual
            jTextFieldNomePaladin.setText(currentPaladin.getNome()); // Assumindo jTextFieldNomePaladin
            jTextFieldLevelPaladin.setText(String.valueOf(currentPaladin.getLevel())); // Assumindo jTextFieldLevelPaladin
            jTextFieldSkillPaladin.setText(String.valueOf(currentPaladin.getSkill())); // Assumindo jTextFieldSkillPaladin

            jLabelPaladinSalvos.setText("Nome: " + currentPaladin.getNome()
                    + " | Level: " + currentPaladin.getLevel()
                    + " | Skill: " + currentPaladin.getSkill());
        } else {
            // Limpa os campos se não houver Paladin para exibir
            jTextFieldNomePaladin.setText("");
            jTextFieldLevelPaladin.setText("");
            jTextFieldSkillPaladin.setText("");
            jLabelPaladinSalvos.setText("Nenhum Paladin salvo.");
        }
    }

    // O método atualizarArquivo() não é mais necessário aqui.
    // private void atualizarArquivo() { ... }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButtonSalvarPaladin = new javax.swing.JButton();
        jButtonExcluirPaladin = new javax.swing.JButton();
        jButtonAlterarPaladin = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNomePaladin = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldLevelPaladin = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextFieldSkillPaladin = new javax.swing.JTextPane();
        jLabelPaladinSalvos = new javax.swing.JLabel();
        jButtonPassarPaladin = new javax.swing.JButton();
        jButtonPesquisarPaladin = new javax.swing.JButton();

        jButton3.setText("jButton3");

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButtonSalvarPaladin.setText("Salvar");
        jButtonSalvarPaladin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSalvarPaladinMouseClicked(evt);
            }
        });
        jButtonSalvarPaladin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarPaladinActionPerformed(evt);
            }
        });

        jButtonExcluirPaladin.setText("Excluir");
        jButtonExcluirPaladin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonExcluirPaladinMouseClicked(evt);
            }
        });

        jButtonAlterarPaladin.setText("Alterar");
        jButtonAlterarPaladin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAlterarPaladinMouseClicked(evt);
            }
        });
        jButtonAlterarPaladin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarPaladinActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Yu Gothic Medium", 3, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 255));
        jLabel1.setText("Nome");

        jTextFieldNomePaladin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNomePaladinActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Yu Gothic Medium", 3, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 255));
        jLabel2.setText("Level");

        jLabel3.setFont(new java.awt.Font("Yu Gothic Medium", 3, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 255));
        jLabel3.setText("Skill");

        jTextFieldLevelPaladin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldLevelPaladinActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTextFieldSkillPaladin);

        jLabelPaladinSalvos.setFont(new java.awt.Font("Segoe UI Historic", 3, 14)); // NOI18N
        jLabelPaladinSalvos.setForeground(new java.awt.Color(0, 51, 255));

        jButtonPassarPaladin.setText("Atualizar ou >>>");
        jButtonPassarPaladin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonPassarPaladinMouseClicked(evt);
            }
        });
        jButtonPassarPaladin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPassarPaladinActionPerformed(evt);
            }
        });

        jButtonPesquisarPaladin.setText("Pesquisar");
        jButtonPesquisarPaladin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonPesquisarPaladinMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(39, 39, 39)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldNomePaladin, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                                .addComponent(jTextFieldLevelPaladin)
                                .addComponent(jScrollPane1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonPesquisarPaladin))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(123, 123, 123)
                            .addComponent(jLabelPaladinSalvos, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonPassarPaladin)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonSalvarPaladin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonExcluirPaladin)
                                .addGap(76, 76, 76)
                                .addComponent(jButtonAlterarPaladin)))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldNomePaladin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPesquisarPaladin))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldLevelPaladin, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonPassarPaladin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPaladinSalvos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAlterarPaladin)
                    .addComponent(jButtonExcluirPaladin)
                    .addComponent(jButtonSalvarPaladin))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldLevelPaladinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldLevelPaladinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldLevelPaladinActionPerformed

    private void jButtonAlterarPaladinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarPaladinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAlterarPaladinActionPerformed

    private void jButtonSalvarPaladinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSalvarPaladinMouseClicked
// Pega os dados dos campos e adiciona tratamento de erro
        String nome = jTextFieldNomePaladin.getText();

        int level = 0;
        try {
            level = Integer.parseInt(jTextFieldLevelPaladin.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, insira um número válido para o Level.", "Erro de Entrada", JOptionPane.ERROR_MESSAGE);
            return; // Sai do método se houver erro
        }

        int skill = 0;
        try {
            skill = Integer.parseInt(jTextFieldSkillPaladin.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, insira um número válido para o Skill.", "Erro de Entrada", JOptionPane.ERROR_MESSAGE);
            return; // Sai do método se houver erro
        }

        // Cria o objeto Paladin
        Paladin paladin = new Paladin(nome, level, skill);

        // Salva usando o controller
        controller.salvar(paladin);

        // Mensagem de sucesso
        JOptionPane.showMessageDialog(this, "Paladin salvo com sucesso!");

        // Recarrega a lista para refletir a adição e exibe o novo Paladin
        carregarPaladins();
        currentIndex = paladinsList.size() - 1; // Vai para o último adicionado
        exibirPaladin();
    }//GEN-LAST:event_jButtonSalvarPaladinMouseClicked

    private void jButtonSalvarPaladinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarPaladinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSalvarPaladinActionPerformed

    private void jButtonPassarPaladinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonPassarPaladinMouseClicked
        if (!paladinsList.isEmpty()) {
            currentIndex = (currentIndex + 1) % paladinsList.size();
            exibirPaladin();
        }
    }//GEN-LAST:event_jButtonPassarPaladinMouseClicked

    private void jButtonPassarPaladinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPassarPaladinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPassarPaladinActionPerformed

    private void jButtonExcluirPaladinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExcluirPaladinMouseClicked
        if (!paladinsList.isEmpty() && currentIndex >= 0 && currentIndex < paladinsList.size()) {
            String nomeParaExcluir = paladinsList.get(currentIndex).getNome();
            int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir o Paladin " + nomeParaExcluir + "?", "Confirmar Exclusão", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                controller.excluir(nomeParaExcluir);
                JOptionPane.showMessageDialog(this, "Paladin " + nomeParaExcluir + " excluído com sucesso!");
                carregarPaladins(); // Recarrega a lista para refletir a exclusão
                if (!paladinsList.isEmpty()) {
                    if (currentIndex >= paladinsList.size()) {
                        currentIndex = paladinsList.size() - 1;
                    }
                    exibirPaladin();
                } else {
                    exibirPaladin(); // Exibe "Nenhum Paladin salvo."
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum Paladin para excluir.", "Erro", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonExcluirPaladinMouseClicked

    private void jButtonAlterarPaladinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAlterarPaladinMouseClicked
        if (!paladinsList.isEmpty() && currentIndex >= 0 && currentIndex < paladinsList.size()) {
            String nomeOriginal = paladinsList.get(currentIndex).getNome();

            // Pega os dados dos campos de texto da própria janela para alteração
            int level = 0;
            try {
                level = Integer.parseInt(jTextFieldLevelPaladin.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, insira um número válido para o Level.", "Erro de Entrada", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int skill = 0;
            try {
                skill = Integer.parseInt(jTextFieldSkillPaladin.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, insira um número válido para o Skill.", "Erro de Entrada", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Chama o método alterar do controller
            controller.alterar(nomeOriginal, level, skill);
            JOptionPane.showMessageDialog(this, "Dados do Paladin " + nomeOriginal + " alterados com sucesso!");

            // Recarrega a lista para refletir a alteração e exibe os dados atualizados
            carregarPaladins();
            exibirPaladin();
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum Paladin selecionado para alterar.", "Erro", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAlterarPaladinMouseClicked

    private void jTextFieldNomePaladinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNomePaladinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNomePaladinActionPerformed

    private void jButtonPesquisarPaladinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonPesquisarPaladinMouseClicked
        String nomePesquisa = jTextFieldNomePaladin.getText().trim();
        if (nomePesquisa.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, informe o nome para pesquisar.");
            return;
        }

        Paladin foundPaladin = controller.buscarPorNome(nomePesquisa); // Usa o controller para buscar

        if (foundPaladin != null) {
            // Atualiza campos com o Paladin encontrado
            jTextFieldNomePaladin.setText(foundPaladin.getNome());
            jTextFieldLevelPaladin.setText(String.valueOf(foundPaladin.getLevel()));
            jTextFieldSkillPaladin.setText(String.valueOf(foundPaladin.getSkill()));

            // Atualiza o currentIndex para o Paladin encontrado
            carregarPaladins(); // Garante que a lista local paladinsList está atualizada antes de buscar o índice
            currentIndex = paladinsList.indexOf(foundPaladin);

            // Atualiza label
            exibirPaladin();

            JOptionPane.showMessageDialog(this, "Paladin '" + nomePesquisa + "' encontrado com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Paladin com nome '" + nomePesquisa + "' não encontrado.");
        }
    }//GEN-LAST:event_jButtonPesquisarPaladinMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaladinJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaladinJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaladinJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaladinJanela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaladinJanela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonAlterarPaladin;
    private javax.swing.JButton jButtonExcluirPaladin;
    private javax.swing.JButton jButtonPassarPaladin;
    private javax.swing.JButton jButtonPesquisarPaladin;
    private javax.swing.JButton jButtonSalvarPaladin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelPaladinSalvos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldLevelPaladin;
    private javax.swing.JTextField jTextFieldNomePaladin;
    private javax.swing.JTextPane jTextFieldSkillPaladin;
    // End of variables declaration//GEN-END:variables
}
